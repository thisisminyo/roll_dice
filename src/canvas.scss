//Setting the colors we're syncing up with
$pixel-color-map: (
    'p' : #ffcdd2,
    'd' : #e57373,
    'b' : #212121,
    'w' : #ffffff,
    'x' : transparent 
);

//Size of the pixels
$pixel-size: 10px !default;

//Pixel art matrix
$pixel-art:(
    rabbit: (
        (w w w w w w w w w w w w w w w w w w w w)
        (w w w w w w w w w w w w w w w w w w w w)
        (w w w w w w p p w w w w p p w w w w w w)
        (w w w w w p p p w w w w p p p w w w w w)
        (w w w w w p d p p w w p p d p w w w w w)
        (w w w w w p d d p w w p d d p w w w w w)
        (w w w w w p d d p w w p d d p w w w w w)
        (w w w w w p d d p w w p d d p w w w w w)
        (w w w w w p d d p w w p d d p w w w w w)
        (w w w w w p d p p p p p p d p w w w w w)
        (w w w w p p p p p p p p p p p p w w w w)
        (w w w w p p p p p p p p p p p p p w w w)
        (w w w p p b w p p p p p p b w p p w w w)
        (w w p p p b b p p p p p p b b p p p w w)
        (w w p p p p p p p d p p p p p p p p w w)
        (w w p p p p p p p d p p p p p p p p w w)
        (w w w p p p p d d d d d p p p p p w w w)
        (w w w w p p p p p p p p p p p p w w w w)
        (w w w w w w w w w w w w w w w w w w w w)
        (w w w w w w w w w w w w w w w w w w w w)
    ),
);

//Function to read the matrix and pixelize it
@function pixelize($matrix, $size){
    $l : length($matrix); //length of the entire
    $sh : ''; //shadows pixel section
    $i : $l; //length of the line on a matrix

    //read through the all the rows of the pixel
    @for $i from 1 through $l {
        $row : nth($matrix, $i); //this is a single row

        @for $j from 1 through length($row){
            $item : nth($row, $j); //itemize each element in that row

            //if that item is an x, give it a drop shadow square w/background color (this is where we're building the shadows list)
            @if map-has-key($pixel-color-map, $item){
                $sh : $sh + ($j*$size) + ' ' + ($i*$size) + ' ' + map-get($pixel-color-map, $item);
            } @else {
                @warn 'there is no color specified in "pixel-color-map" for: "#{$item}"';
            }

            //when you get to the end of the row, add a comma before the next block of drop shadows
            @if not ($j == length($row) and $i == $l) {
                $sh : $sh + ',';
            }
        }
    }

    //return the entire shadow list here
    @return unquote($sh);
}

//Mixin to style each item
@mixin style-item($matrix, $size) {
    position: relative; // pixels stack next to each other

    // set width & height of icon based on size of pixels
    width : ($size * length(nth($matrix,1)));
    height: ($size * length($matrix));

    &:after{
        content: '';

        //position everything from the top left corner
        position: absolute;
        top: (-$size);
        left: (-$size);
        width: $size;
        height: $size;

        //this is where we make the stitch
        box-shadow: pixelize($matrix, $size);
    }
}

// Page Styling

.icons{
    list-style:none;
    max-width :800px;
    padding:0;
    text-align: center;
    width:100%;

    div{
        display:inline-block;
        border-radius: 40px;
        overflow:hidden;
    }

    @each $key, $value in $pixel-art{
        &--#{$key}{
            @include style-item($value, $pixel-size);
        }
    }
}